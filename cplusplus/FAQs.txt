Q) What is array decay in C++?
A) Loss of type and size of array when we pass it 
   as pointer or value

Q) How to avoid it?
    Pass by reference.
    Pass size as another argument.

====
Q) Opaque pointer?
A) Sometimes we provide minimal declaration of a structure 
    just to aid the compiler in compiling it. We call such
    pointers as opaque as we cannot see the members of the 
    structure

===
Q) Reference
A) When we declare a variable as reference, it becomes an 
    alternate name for existing variable.

Q) Applications of reference
A)  Modify the passed paramenters in a function
    Avoid copy of large structures
    In for each loops to modify all objects
    In for each loops to avoid copy of all objects
    
===
Q) Smart Pointer
A)  Smart pointer is a wrapper class over a pointer
    with operators like * and -> overloaded.

===
Q) auto_ptr/unique_ptr
A)  Based on exclusive ownership model. Two pointers cant
    point to the same resource. Copying or assigning pointers
    changes ownership. Source pointer has given ownership to 
    destination pointer. Source pointer would point to NULL.

Q) unique_ptr
A)  Introduced in C++11 as a replacement for auto_ptr
    Supports Arrays.
    Explicitly prevents copying of its contained container.
    There can be at most one unique_ptr at one resource.
    When it is destroyed, the resource is claimed.
    Any attempt to copy a unique_ptr will result in a compilation
    error.
    Use unique pointer when you want to have exclusive access to a 
    resource.
    
Q) shared_ptr
A)  Its a reference counting ownership model. It maintains a ref count
    of all contained pointer in co-operation with all copies of the 
    shared pointer. So the object is deleted when the reference count 
    becomes zero.

Q) weak_ptr
A)  A weak_ptr is created as a copy of shared_ptr but it does not participate
    in reference counting. It is used to break circular dependencies between
    shared pointer instances.

Q) cyclic dependency problem with shared pointer
A)  Lets say there are two classes A and B, both have a shared pointer 
    which are pointing at each other. In such a case, the use_count will 
    never be zero and they never get deleted. Solution is to make one of the 
    two pointers as weak.

=====
Q) Initialization of data members
A)  class variables are initialized in the same order as they appear in the 
    class declaration

===
Q) Explicit keyword
A) Used to stop implicit conversions by the compiler.

===
Q) When to use Initializer List to initialize data in C++
A)  To initialize non-static const data members.
    For initialization of reference members.
    For initialization of member objects which do not have default constructor.
    For initializtion of base class members.
    When the constructor parameter name is the same as data member.
    For better performance. With Initializer list: Copy constructor + Destructor
        Without initializer list: Constructor + Assignment operator + Destructor

Q) When to use private destructor
A)  When we want to control the destruction of objects. We can write a friend function
        to destroy the object of such a class.

=== 
Q) virtual constructor
A)  virtual constructors are not allowed. Factory pattern is used to polymorph derived
        class creation.

Q) virtual copy constructor
A)  See prototype pattern
